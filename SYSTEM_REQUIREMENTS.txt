# ====================================================
# ACE CSS LEAVE PORTAL - COMPLETE SYSTEM REQUIREMENTS
# ====================================================
# This file lists everything you need to deploy the Leave Portal
# Print this file and check each item before deployment!

# ====================================================
# SYSTEM REQUIREMENTS
# ====================================================

OPERATING_SYSTEM:
  ‚úì Windows 10/11 (64-bit) or Windows Server 2016/2019/2022
  ‚úì Minimum 4GB RAM (8GB recommended for smooth operation)
  ‚úì 10GB free disk space on D: drive (for installation)
  ‚úì Internet connection (for downloads and updates)
  ‚úì Administrator privileges (required for installation)

NETWORK_REQUIREMENTS:
  ‚úì Static IP address or DDNS setup
  ‚úì Domain name (optional but recommended for professional look)
  ‚úì Ports 80, 3002, 8080, 3307 accessible through firewall
  ‚úì DNS A record pointing to server IP (if using domain)

# ====================================================
# CORE SOFTWARE TO DOWNLOAD AND INSTALL
# ====================================================

1. NODE.JS (JavaScript Runtime Engine)
   üì• Download: https://nodejs.org/
   üì¶ Version: LTS (Long Term Support) - Currently v18.x or v20.x
   üíæ Installation: Download .msi installer and run
   üìä Size: ~50MB
   üéØ Purpose: Runs the backend and frontend applications
   ‚úÖ Includes: Node.js runtime, npm, npx
   ‚öôÔ∏è  Installation: Standard Windows installer - just click Next!

2. MYSQL DATABASE SERVER
   üì• Download: https://dev.mysql.com/downloads/mysql/
   üì¶ Version: 8.0.x (latest stable version)
   üíæ Installation: MySQL Installer for Windows
   üìä Size: ~400-500MB
   üéØ Purpose: Stores all student data, leave applications, user accounts
   ‚úÖ Components needed:
     - MySQL Server (main database)
     - MySQL Workbench (visual database tool)
     - MySQL Command Line Client (for scripts)
   ‚öôÔ∏è  Configuration:
     - Port: 3307 (NOT the default 3306!)
     - Root password: Set a STRONG password and remember it!
     - Service name: MySQL80

3. NGINX WEB SERVER
   üì• Download: https://nginx.org/en/download.html
   üì¶ Version: Latest stable version (nginx/Windows)
   üíæ Installation: Extract ZIP to C:\nginx folder
   üìä Size: ~15MB
   üéØ Purpose: Makes website accessible without showing port numbers
   ‚úÖ Folder structure after extraction:
     C:\nginx\
     ‚îú‚îÄ‚îÄ nginx.exe
     ‚îú‚îÄ‚îÄ conf\nginx.conf
     ‚îú‚îÄ‚îÄ html\
     ‚îî‚îÄ‚îÄ logs\

# ====================================================
# GLOBAL NPM PACKAGES (Auto-installed by scripts)
# ====================================================

4. PM2 (Process Manager for Node.js)
   üì¶ Install: npm install -g pm2
   üì¶ Version: Latest (5.x)
   üì¶ Additional: npm install -g pm2-windows-startup
   üéØ Purpose: Keeps your application running 24/7
   ‚úÖ Features:
     - Auto-restart if application crashes
     - Windows service integration
     - Log file management
     - Multiple process management
   ‚öôÔ∏è  Note: Installed automatically by deployment script

5. VITE (Frontend Build Tool)
   üì¶ Install: npm install -g vite (if needed)
   üì¶ Version: Latest (4.x or 5.x)
   üéØ Purpose: Builds the website frontend for production
   ‚öôÔ∏è  Note: Also installed locally in project

# ====================================================
# WINDOWS TOOLS AND FEATURES
# ====================================================

REQUIRED_WINDOWS_COMPONENTS:
  ‚úì PowerShell 5.1 or later (built into Windows)
  ‚úì Windows Defender Firewall (enabled and configured)
  ‚úì .NET Framework 4.7.2 or later (usually pre-installed)
  ‚úì Windows Terminal (optional but recommended)

OPTIONAL_WINDOWS_FEATURES:
  ‚≠ï IIS (Internet Information Services) - alternative to Nginx
  ‚≠ï Windows Subsystem for Linux (WSL) - not needed but useful

DEVELOPMENT_TOOLS (if compiling native modules):
  üì• Visual Studio Build Tools
  üì• Download: https://aka.ms/vs/17/release/vs_buildtools.exe
  üéØ Purpose: Compiles native Node.js modules (rarely needed)
  ‚úÖ Components:
     - MSVC v143 compiler toolset
     - Windows 10/11 SDK (latest)
     - CMake tools for C++

# ====================================================
# PROJECT STRUCTURE AND FILES
# ====================================================

MAIN_PROJECT_FOLDERS:
D:\leave-portal\
‚îú‚îÄ‚îÄ backend\              # Server-side application code
‚îú‚îÄ‚îÄ frontend\             # Website interface code  
‚îú‚îÄ‚îÄ dist\                # Built website files (created after build)
‚îú‚îÄ‚îÄ node_modules\        # Node.js dependencies (created after npm install)
‚îú‚îÄ‚îÄ logs\                # Application log files (created by PM2)
‚îú‚îÄ‚îÄ uploads\             # User uploaded documents (created by app)
‚îî‚îÄ‚îÄ Documentation\       # All guide files

CONFIGURATION_FILES:
‚úì .env.production        # Environment variables (database passwords, etc.)
‚úì ecosystem.config.production.js  # PM2 process configuration
‚úì nginx-leave-portal.conf         # Nginx web server configuration
‚úì package.json          # Project dependencies list
‚úì rebuilt_schema.sql    # Database structure file

MANAGEMENT_SCRIPTS:
‚úì Prepare-Production.ps1           # Run on development machine
‚úì Deploy-Windows-Production.ps1    # Run on college server
‚úì start-production.bat              # Start the application
‚úì stop-production.bat              # Stop the application
‚úì restart-production.bat           # Restart the application
‚úì status-production.bat            # Check if running
‚úì start-nginx.bat                  # Start web server (if using domain)
‚úì stop-nginx.bat                   # Stop web server
‚úì reload-nginx.bat                 # Reload web server config
‚úì nginx-status.bat                 # Check web server status

# ====================================================
# NETWORK PORT ASSIGNMENTS
# ====================================================

PORT_USAGE:
  üåê Port 80   : Nginx HTTP (main website access)
  üîí Port 443  : Nginx HTTPS (secure access, optional)
  üîß Port 3002 : Backend API server (internal communication)
  üì± Port 8080 : Frontend server (internal, serves website files)
  üóÑÔ∏è  Port 3307 : MySQL database server (data storage)

FIREWALL_CONFIGURATION:
Windows Firewall Inbound Rules (allow these ports):
  ‚úÖ HTTP (port 80) - for website access
  ‚úÖ HTTPS (port 443) - for secure website access (optional)
  ‚úÖ Backend (port 3002) - for API communication
  ‚úÖ Frontend (port 8080) - for website files
  ‚ùå MySQL (port 3307) - localhost only, block external access

# ====================================================
# DATABASE REQUIREMENTS
# ====================================================

MYSQL_CONFIGURATION:
  üìä Database name: cyber_security_leave_portal
  üë§ Database user: leave_portal
  üîê User password: (set during installation)
  üè† Host: localhost
  üö™ Port: 3307 (custom port, not default 3306)
  üìÅ Storage engine: InnoDB (default)
  üî§ Character set: utf8mb4 (supports all characters)

DATABASE_TABLES (created automatically):
  üë• users          # Student and teacher accounts
  üìù leave_requests # Leave applications
  üìÇ attachments    # Uploaded documents
  üè∑Ô∏è  leave_types    # Types of leave (sick, casual, etc.)
  üìä audit_logs     # System activity tracking
  ‚öôÔ∏è  system_config # Application settings

# ====================================================
# INSTALLATION CHECKLIST
# ====================================================

PRE_INSTALLATION:
‚ñ° Windows server ready with administrator access
‚ñ° Internet connection available for downloads
‚ñ° D: drive has at least 10GB free space
‚ñ° Server IP address known
‚ñ° Domain name registered (if using custom URL)

SOFTWARE_INSTALLATION_ORDER:
‚ñ° Step 1: Download and install Node.js LTS version
‚ñ° Step 2: Download and install MySQL Server (port 3307)
‚ñ° Step 3: Download and extract Nginx to C:\nginx
‚ñ° Step 4: Verify all software is working:
   - Run: node --version (should show version number)
   - Run: mysql --version (should show version number)
   - Check: C:\nginx\nginx.exe exists

PROJECT_DEPLOYMENT:
‚ñ° Step 5: Run Prepare-Production.ps1 on development machine
‚ñ° Step 6: Copy entire project to D:\leave-portal on server
‚ñ° Step 7: Run Deploy-Windows-Production.ps1 as Administrator
‚ñ° Step 8: Configure MySQL database and import schema
‚ñ° Step 9: Update .env.production with correct passwords
‚ñ° Step 10: Start application and test access

# ====================================================
# VERIFICATION COMMANDS
# ====================================================

AFTER_SOFTWARE_INSTALLATION:
Test Node.js:
  C:\> node --version
  Expected: v18.17.0 (or similar)

Test npm:
  C:\> npm --version  
  Expected: 9.6.7 (or similar)

Test MySQL:
  C:\> mysql --version
  Expected: mysql Ver 8.0.34 (or similar)

Test Nginx:
  C:\> C:\nginx\nginx.exe -v
  Expected: nginx version: nginx/1.24.0 (or similar)

AFTER_DEPLOYMENT:
Check PM2 processes:
  C:\> pm2 status
  Expected: Two processes running (frontend and backend)

Check website access:
  Browser: http://your-server-ip:8080
  Expected: Leave Portal login page

Check database connection:
  C:\> mysql -u leave_portal -p -P 3307
  Expected: MySQL prompt after entering password

# ====================================================
# TROUBLESHOOTING GUIDE
# ====================================================

COMMON_INSTALLATION_ISSUES:

‚ùå "Node.js not recognized"
‚úÖ Solution: Restart PowerShell after Node.js installation

‚ùå "MySQL connection refused"
‚úÖ Solution: Check if MySQL service is running in Windows Services

‚ùå "Port already in use"
‚úÖ Solution: Find and stop the process using the port:
   netstat -ano | findstr :8080
   taskkill /PID <process_id> /F

‚ùå "Permission denied"
‚úÖ Solution: Run PowerShell as Administrator

‚ùå "npm install fails"
‚úÖ Solution: Clear npm cache: npm cache clean --force

‚ùå "Website not loading"
‚úÖ Solution: Check Windows Firewall settings for blocked ports

‚ùå "Database import fails"
‚úÖ Solution: Make sure MySQL is running and credentials are correct

# ====================================================
# PERFORMANCE REQUIREMENTS
# ====================================================

MINIMUM_SYSTEM_SPECS:
  üñ•Ô∏è  CPU: 2 cores, 2.0GHz
  üíæ RAM: 4GB (2GB for OS, 2GB for applications)
  üíø Storage: 10GB free space
  üåê Network: 10 Mbps internet connection

RECOMMENDED_SYSTEM_SPECS:
  üñ•Ô∏è  CPU: 4 cores, 2.5GHz or better
  üíæ RAM: 8GB (plenty of room for multiple users)
  üíø Storage: 20GB free space (room for growth)
  üåê Network: 100 Mbps connection
  üîÑ SSD storage (faster than traditional hard drives)

EXPECTED_PERFORMANCE:
  üë• Concurrent users: 50-100 students/teachers
  üìà Response time: Under 2 seconds for most operations
  üíæ Database size: 1-5GB after one year of usage
  üìä Server uptime: 99.9% (with proper maintenance)

# ====================================================
# SECURITY CONSIDERATIONS
# ====================================================

SECURITY_CHECKLIST:
‚ñ° Change default admin password (admin/admin123)
‚ñ° Use strong MySQL passwords (12+ characters)
‚ñ° Enable Windows Updates (automatic recommended)
‚ñ° Configure Windows Firewall properly
‚ñ° Regular database backups
‚ñ° Monitor log files for suspicious activity
‚ñ° Keep Node.js and dependencies updated
‚ñ° Use HTTPS in production (SSL certificate)

BACKUP_STRATEGY:
üìÅ Files to backup daily:
   - Database: mysqldump command
   - Uploaded files: D:\leave-portal\uploads\
   - Configuration: .env.production

üìÅ Files to backup weekly:
   - Complete application folder
   - Log files
   - Nginx configuration

# ====================================================
# MAINTENANCE SCHEDULE
# ====================================================

DAILY_TASKS (5 minutes):
‚ñ° Check application status: status-production.bat
‚ñ° Review error logs for issues
‚ñ° Verify website accessibility

WEEKLY_TASKS (30 minutes):
‚ñ° Backup database and files
‚ñ° Check disk space usage
‚ñ° Review system performance
‚ñ° Update security patches

MONTHLY_TASKS (2 hours):
‚ñ° Update Node.js dependencies: npm audit fix
‚ñ° Clean old log files
‚ñ° Review user accounts and permissions
‚ñ° Test backup restoration process
‚ñ° Performance optimization review

# ====================================================
# SUCCESS CRITERIA
# ====================================================

DEPLOYMENT_IS_SUCCESSFUL_WHEN:
‚úÖ Website loads at http://your-domain-or-ip
‚úÖ Login page appears with proper styling and logo
‚úÖ Admin can login with admin/admin123 credentials
‚úÖ Students can register new accounts
‚úÖ Students can submit leave applications
‚úÖ Teachers can view and approve/reject applications
‚úÖ File uploads work (students can attach documents)
‚úÖ Email notifications work (if configured)
‚úÖ All management scripts function properly
‚úÖ Application auto-restarts after server reboot
‚úÖ Database stores and retrieves data correctly

USER_EXPERIENCE_GOALS:
üë• Students find the system easy to use
üì± Works well on both desktop and mobile devices
‚ö° Pages load quickly (under 3 seconds)
üíæ Data is never lost (reliable database)
üîê Secure login and data protection
üìß Timely notifications for status updates

# ====================================================
# SUPPORT AND DOCUMENTATION
# ====================================================

INCLUDED_DOCUMENTATION:
üìñ SIMPLE_DEPLOYMENT_GUIDE.md    # Step-by-step for beginners
üìñ REVERSE_PROXY_GUIDE.md        # Nginx configuration details
üìñ WINDOWS_HOSTING_GUIDE.md      # Advanced hosting options
üìñ SYSTEM_REQUIREMENTS.txt       # This file
üìñ REQUIREMENTS.txt              # NPM package dependencies

MANAGEMENT_TOOLS:
üéõÔ∏è  Desktop shortcuts for easy management
üìù Batch scripts for common tasks
üìä Status monitoring scripts
üîÑ Automatic restart capabilities
üìã Log file monitoring

GETTING_HELP:
üåê Official documentation in project files
üí¨ Comments in all script files explain what they do
üìß Error messages are descriptive and actionable
üîç Status scripts show detailed information
üì± Management commands have built-in help

# ====================================================
# FINAL CHECKLIST BEFORE GOING LIVE
# ====================================================

TECHNICAL_READINESS:
‚ñ° All software installed and tested
‚ñ° Database created and schema imported
‚ñ° Application starts and stops properly
‚ñ° Website accessible from other computers
‚ñ° SSL certificate installed (if using HTTPS)
‚ñ° Backups configured and tested
‚ñ° Monitoring tools set up
‚ñ° Performance tested with multiple users

SECURITY_READINESS:
‚ñ° Default passwords changed
‚ñ° Firewall properly configured
‚ñ° User accounts created with appropriate permissions
‚ñ° Audit logging enabled
‚ñ° Security updates applied
‚ñ° Backup encryption enabled (if required)

USER_READINESS:
‚ñ° User training completed
‚ñ° User accounts created for teachers/admins
‚ñ° Leave types and policies configured in system
‚ñ° Email templates customized (if using email)
‚ñ° Help documentation provided to end users
‚ñ° Support process established

OPERATIONAL_READINESS:
‚ñ° Maintenance schedule planned
‚ñ° Monitoring and alerting configured
‚ñ° Backup verification process established
‚ñ° Incident response plan created
‚ñ° Performance baselines recorded
‚ñ° Documentation updated with any customizations

üéâ CONGRATULATIONS! üéâ
When all boxes are checked, your Leave Portal is ready for production use!

Your college will have a modern, efficient system for managing student leave requests,
saving time for both students and administrative staff.

Students can apply online anytime, teachers can review efficiently, and everything
is stored securely with proper audit trails for institutional requirements.
